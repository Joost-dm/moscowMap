{"remainingRequest":"/home/joost/workflow/MoscowMap/node_modules/thread-loader/dist/cjs.js!/home/joost/workflow/MoscowMap/node_modules/babel-loader/lib/index.js!/home/joost/workflow/MoscowMap/src/models/region.js","dependencies":[{"path":"/home/joost/workflow/MoscowMap/src/models/region.js","mtime":1600053807423},{"path":"/home/joost/workflow/MoscowMap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/joost/workflow/MoscowMap/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/joost/workflow/MoscowMap/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLnRvLWZpeGVkIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaCI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiL2hvbWUvam9vc3Qvd29ya2Zsb3cvTW9zY293TWFwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiL2hvbWUvam9vc3Qvd29ya2Zsb3cvTW9zY293TWFwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CmltcG9ydCBQb2ludCBmcm9tICJAL21vZGVscy9wb2ludCI7Cgp2YXIgUmVnaW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBSZWdpb24ocmVnaW9uLCBtYXApIHsKICAgIHZhciBnZW9tZXRyeSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogcmVnaW9uLmdlb21ldHJ5OwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZWdpb24pOwoKICAgIHRoaXMubmFtZSA9IHJlZ2lvbi5wcm9wZXJ0aWVzLk5BTUU7CiAgICB0aGlzLmNvbG9yID0gcmVnaW9uLm9wdGlvbnMuZmlsbENvbG9yOwogICAgdGhpcy5tYXAgPSBtYXA7CiAgICB0aGlzLmNvb3JkcyA9IGdlb21ldHJ5LmNvb3JkaW5hdGVzOwogICAgdGhpcy53ZWlnaHQgPSBudWxsOwogICAgdGhpcy5wb2ludHMgPSBbXTsKICAgIHRoaXMuZ2VvID0gbmV3IHltYXBzLkdlb09iamVjdCh7CiAgICAgIGdlb21ldHJ5OiBnZW9tZXRyeSwKICAgICAgcHJvcGVydGllczogcmVnaW9uLnByb3BlcnRpZXMKICAgIH0sIHsKICAgICAgZmlsbENvbG9yOiByZWdpb24ub3B0aW9ucy5maWxsQ29sb3IsCiAgICAgIHN0cm9rZUNvbG9yOiAnIzQxNDE0MScsCiAgICAgIG9wYWNpdHk6IDAuNSwKICAgICAgc3Ryb2tlV2lkdGg6IDIsCiAgICAgIHN0cm9rZVN0eWxlOiAnc29saWQnCiAgICB9KTsKICAgIHRoaXMubWF4WCA9IDA7CiAgICB0aGlzLm1heFkgPSAwOwogICAgdGhpcy5taW5YID0gMTAwOwogICAgdGhpcy5taW5ZID0gMTAwOwogICAgdGhpcy5saW1pdHMoKTsKICB9CgogIF9jcmVhdGVDbGFzcyhSZWdpb24sIFt7CiAgICBrZXk6ICJjb250YWlucyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29udGFpbnMoY29vcmRzKSB7CiAgICAgIHJldHVybiB0aGlzLmdlby5nZW9tZXRyeS5jb250YWlucyhjb29yZHMpOwogICAgfQogIH0sIHsKICAgIGtleTogImRpc3BsYXkiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRpc3BsYXkoKSB7CiAgICAgIHRoaXMubWFwLmdlb09iamVjdHMuYWRkKHRoaXMuZ2VvKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJoaWRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBoaWRlKCkgewogICAgICB0aGlzLm1hcC5nZW9PYmplY3RzLnJlbW92ZSh0aGlzLmdlbyk7CiAgICB9CiAgfSwgewogICAga2V5OiAibGltaXRzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBsaW1pdHMoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB0aGlzLmNvb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uIChjb29yZCkgewogICAgICAgIGNvb3JkLmZvckVhY2goZnVuY3Rpb24gKHBhaXIpIHsKICAgICAgICAgIGlmIChwYWlyWzBdID4gX3RoaXMubWF4WCkgewogICAgICAgICAgICBfdGhpcy5tYXhYID0gcGFpclswXTsKICAgICAgICAgIH0gZWxzZSBpZiAocGFpclswXSA8IF90aGlzLm1pblgpIHsKICAgICAgICAgICAgX3RoaXMubWluWCA9IHBhaXJbMF07CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHBhaXJbMV0gPiBfdGhpcy5tYXhZKSB7CiAgICAgICAgICAgIF90aGlzLm1heFkgPSBwYWlyWzFdOwogICAgICAgICAgfSBlbHNlIGlmIChwYWlyWzFdIDwgX3RoaXMubWluWSkgewogICAgICAgICAgICBfdGhpcy5taW5ZID0gcGFpclsxXTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSk7CiAgICAgIHRoaXMud2VpZ2h0ID0gKCh0aGlzLm1heFggLSB0aGlzLm1pblgpICogKHRoaXMubWF4WSAtIHRoaXMubWluWSkgKiAxMDAwKS50b0ZpeGVkKDUpOwogICAgfQogIH0sIHsKICAgIGtleTogImdlbmVyYXRlUmFuZG9tUG9pbnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdlbmVyYXRlUmFuZG9tUG9pbnQoKSB7CiAgICAgIHZhciBkb25lID0gZmFsc2U7CgogICAgICB3aGlsZSAoZG9uZSA9PT0gZmFsc2UpIHsKICAgICAgICB2YXIgeCA9IChNYXRoLnJhbmRvbSgpICogKHRoaXMubWF4WCAtIHRoaXMubWluWCkgKyB0aGlzLm1pblgpLnRvRml4ZWQoNSk7CiAgICAgICAgdmFyIHkgPSAoTWF0aC5yYW5kb20oKSAqICh0aGlzLm1heFkgLSB0aGlzLm1pblkpICsgdGhpcy5taW5ZKS50b0ZpeGVkKDUpOwoKICAgICAgICBpZiAodGhpcy5jb250YWlucyhbeCwgeV0pKSB7CiAgICAgICAgICBkb25lID0gdHJ1ZTsKICAgICAgICAgIHZhciBwb2ludCA9IG5ldyBQb2ludChbeCwgeV0sIHRoaXMpOwogICAgICAgICAgdGhpcy5wb2ludHMucHVzaChwb2ludCk7CiAgICAgICAgICBwb2ludC5kaXNwbGF5KCk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiY2xlYXJQb2ludHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyUG9pbnRzKCkgewogICAgICB0aGlzLnBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChwb2ludCkgewogICAgICAgIHBvaW50LmhpZGUoKTsKICAgICAgfSk7CiAgICAgIHRoaXMucG9pbnRzID0gW107CiAgICB9CiAgfV0pOwoKICByZXR1cm4gUmVnaW9uOwp9KCk7CgpleHBvcnQgeyBSZWdpb24gYXMgZGVmYXVsdCB9Ow=="},{"version":3,"sources":["/home/joost/workflow/MoscowMap/src/models/region.js"],"names":["Point","Region","region","map","geometry","name","properties","NAME","color","options","fillColor","coords","coordinates","weight","points","geo","ymaps","GeoObject","strokeColor","opacity","strokeWidth","strokeStyle","maxX","maxY","minX","minY","limits","contains","geoObjects","add","remove","forEach","coord","pair","toFixed","done","x","Math","random","y","point","push","display","hide"],"mappings":"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","sourcesContent":["import Point from \"@/models/point\";\nexport default class Region {\n  constructor(region, map, geometry=region.geometry) {\n    this.name = region.properties.NAME\n    this.color = region.options.fillColor\n    this.map = map\n    this.coords = geometry.coordinates\n    this.weight = null\n    this.points = []\n    this.geo = new ymaps.GeoObject({\n        geometry: geometry,\n        properties: region.properties\n      }, {\n        fillColor: region.options.fillColor,\n        strokeColor: '#414141',\n        opacity: 0.5,\n        strokeWidth: 2,\n        strokeStyle: 'solid'\n      });\n    this.maxX = 0\n    this.maxY = 0\n    this.minX = 100\n    this.minY = 100\n    this.limits()\n  }\n  contains(coords) {\n    return this.geo.geometry.contains(coords)\n  }\n  display() {\n    this.map.geoObjects.add(this.geo)\n  }\n  hide() {\n    this.map.geoObjects.remove(this.geo)\n  }\n  limits() {\n    this.coords.forEach(coord => {\n      coord.forEach((pair) => {\n        if (pair[0] > this.maxX) {\n          this.maxX = pair[0]\n        } else if (pair[0] < this.minX) {\n          this.minX = pair[0]\n        }\n        if (pair[1] > this.maxY) {\n          this.maxY = pair[1]\n        } else if (pair[1] < this.minY) {\n          this.minY = pair[1]\n        }\n      })\n    })\n    this.weight = ((this.maxX - this.minX) * (this.maxY - this.minY) * 1000).toFixed(5)\n  }\n  generateRandomPoint() {\n    var done = false\n    while ( done === false ) {\n      var x = (Math.random() * (this.maxX - this.minX) + this.minX).toFixed(5);\n      var y = (Math.random() * (this.maxY - this.minY) + this.minY).toFixed(5);\n      if (this.contains([x, y])) {\n        done = true\n        const point = new Point([x, y], this)\n        this.points.push(point)\n        point.display()\n      }\n    }\n  }\n  clearPoints() {\n    this.points.forEach(point => {\n      point.hide()\n    })\n    this.points = []\n  }\n}\n"]}]}