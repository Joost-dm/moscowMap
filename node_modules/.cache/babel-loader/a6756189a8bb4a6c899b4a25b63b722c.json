{"remainingRequest":"/home/joost/workflow/MoscowMap/node_modules/thread-loader/dist/cjs.js!/home/joost/workflow/MoscowMap/node_modules/babel-loader/lib/index.js!/home/joost/workflow/MoscowMap/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/joost/workflow/MoscowMap/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/joost/workflow/MoscowMap/src/components/MapMoscow.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/joost/workflow/MoscowMap/src/components/MapMoscow.vue","mtime":1600090883088},{"path":"/home/joost/workflow/MoscowMap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/joost/workflow/MoscowMap/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/joost/workflow/MoscowMap/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/joost/workflow/MoscowMap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/joost/workflow/MoscowMap/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["MapMoscow.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"moscow-map\">\n    <div class=\"moscow-map__chart\" ref=\"chartdiv\"></div>\n    <v-btn class=\"moscow-map__refresh_button\" @click=\"generateRandomPoints(100)\">Сгенерировать</v-btn>\n    <div id=\"map\" class=\"moscow-map__map\"></div>\n  </div>\n</template>\n\n<script>\nimport * as axios from 'axios'\nimport Region from \"@/models/region\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n\n\nexport default {\n  name: 'MapMoscow',\n  data: () => ({\n    map: null,\n    regionsJson: null,\n    regions: [],\n    loading: false,\n    chartData: [],\n    activeSliceName: null\n  }),\n  methods: {\n    yandexMapsInitialization () {\n     this.map = new ymaps.Map('map', {\n        center: [ 37.64, 55.76],\n        zoom: 10\n      })\n      this.map.layers.add(new ymaps.Layer('http://tile.openstreetmap.org/%z/%x/%y.png', {\n          projection: ymaps.projection.sphericalMercator\n      }));\n     this.map.copyrights.add('&copy; OpenStreetMap contributors, CC-BY-SA');\n    },\n    async getRegionsJson () {\n      const regionsJson = await axios.get('https://api.jsonbin.io/b/5f5c0870ad23b57ef9107157/8',\n        { headers: { 'secret-key': '$2b$10$f80fXx031oddADsAPOtLbOfaINvWiQ8TIeHrK.dl4QnE6CTKyFKgG' } }\n      )\n      this.regionsJson = regionsJson.data\n      this.GeoJsonHandler()\n    },\n    GeoJsonHandler () {\n      this.regionsJson.features.forEach(region => {\n        if (region.geometry.type === \"Polygon\") {\n          var reg = new Region(region, this.map)\n          this.regions.push(reg)\n          reg.display()\n        } else if (region.geometry.type === \"MultiPolygon\") {\n          region.geometry.coordinates.forEach(coords => this.addMultiPolygonPartToMap(coords, region));\n        }\n      })\n      this.generateRandomPoints(100)\n    },\n    addMultiPolygonPartToMap (coords, region) {\n      var reg = new Region(region, this.map, { 'type': 'Polygon', 'coordinates': coords })\n      this.regions.push(reg)\n      reg.display()\n    },\n    clearAllPoints () {\n      this.regions.forEach(region => {\n        region.isActive = false\n        region.clearPoints()\n      })\n    },\n    generateRandomPoints(value) {\n      this.clearAllPoints()\n      var i = 0\n      var grossweight = 0\n      this.regions.forEach(region => {\n        region.display()\n        region.rangeFrom = grossweight.toFixed(5)\n        grossweight += parseFloat(region.weight)\n        region.rangeTo = grossweight.toFixed(5)\n      })\n      while (i < value) {\n        var randomValue = (Math.random() * grossweight)\n        this.regions.forEach(region => {\n          if (randomValue <= region.rangeTo && randomValue >= region.rangeFrom) {\n            region.generateRandomPoint()\n          }\n        })\n\n        ++i\n      }\n      this.generateChartData()\n    },\n    generateChartData () {\n      var chartData = []\n      var combinedRegions = new Map\n      this.regions.forEach(region => {\n        if (combinedRegions.has(region.name)) {\n          var value = combinedRegions.get(region.name)\n          value.points += region.points.length\n          combinedRegions.set(region.name, value)\n        } else {\n          combinedRegions.set(region.name, { region: region.name, points: region.points.length, color: region.color })\n        }\n      })\n      for (let value of combinedRegions.values()) {\n        chartData.push(value)\n      }\n      this.chartData = chartData\n      this.chartHandler()\n    },\n    chartHandler () {\n      var chart = am4core.create(this.$refs.chartdiv, am4charts.PieChart);\n      chart.hiddenState.properties.opacity = 0;\n      chart.data = this.chartData\n      chart.innerRadius = am4core.percent(40);\n      chart.depth = 120;\n      chart.legend = new am4charts.Legend();\n      var series = chart.series.push(new am4charts.PieSeries());\n      series.dataFields.value = \"points\";\n      series.dataFields.depthValue = \"points\";\n      series.dataFields.category = \"region\";\n      series.slices.template.cornerRadius = 3;\n      series.colors.step = 3;\n      series.slices.template.events.on(\"hit\", this.sliceClickHandler)\n    },\n    sliceClickHandler (event) {\n      var sliceName = event.target.slice.dataItem._dataContext.region\n      var activeCounter = 0\n      this.regions.forEach(region => {\n        if ((region.name !== sliceName && !region.isActive) || (region.name === sliceName && region.isActive)) {\n          region.isActive = false\n          region.hide()\n          region.points.forEach(point => {\n            point.hide()\n          })\n        } else if (region.name === sliceName && !region.isActive) {\n          this.activeSliceName = sliceName\n          region.isActive = true\n          region.display()\n          region.points.forEach(point => {\n            point.display()\n          })\n        }\n        if (region.isActive) {\n          activeCounter++\n        }\n      })\n      if (activeCounter === 0) {\n        this.regions.forEach(region => {\n          region.display()\n          region.points.forEach(point => {\n            point.display()\n          })\n        })\n      }\n    }\n  },\n  async created () {\n    await this.getRegionsJson()\n  },\n  async mounted () {\n    await ymaps.ready(this.yandexMapsInitialization)\n  },\n  beforeDestroy() {\n    if (this.chart) {\n      this.chart.dispose();\n    }\n  }\n}\n</script>\n<style scoped>\n.moscow-map {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  width: 100%;\n}\n.moscow-map__chart {\n  width: 100%;\n  height: 40%;\n  font-size: 12px;\n}\n.moscow-map__map {\n  width: 100%;\n  height: 60%;\n}\n</style>\n"],"sourceRoot":"src/components"}]}