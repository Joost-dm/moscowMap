{"remainingRequest":"/home/joost/workflow/MoscowMap/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/joost/workflow/MoscowMap/src/components/MapMoscow.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/joost/workflow/MoscowMap/src/components/MapMoscow.vue","mtime":1600054847969},{"path":"/home/joost/workflow/MoscowMap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/joost/workflow/MoscowMap/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/joost/workflow/MoscowMap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/joost/workflow/MoscowMap/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCAqIGFzIGF4aW9zIGZyb20gJ2F4aW9zJwppbXBvcnQgUmVnaW9uIGZyb20gIkAvbW9kZWxzL3JlZ2lvbiI7CmltcG9ydCAqIGFzIGFtNGNvcmUgZnJvbSAiQGFtY2hhcnRzL2FtY2hhcnRzNC9jb3JlIjsKaW1wb3J0ICogYXMgYW00Y2hhcnRzIGZyb20gIkBhbWNoYXJ0cy9hbWNoYXJ0czQvY2hhcnRzIjsKaW1wb3J0IGFtNHRoZW1lc19hbmltYXRlZCBmcm9tICJAYW1jaGFydHMvYW1jaGFydHM0L3RoZW1lcy9hbmltYXRlZCI7CgoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdNYXBNb3Njb3cnLAogIGRhdGE6ICgpID0+ICh7CiAgICBtYXA6IG51bGwsCiAgICByZWdpb25zSnNvbjogbnVsbCwKICAgIHJlZ2lvbnM6IFtdLAogICAgbG9hZGluZzogZmFsc2UsCiAgICBjaGFydERhdGE6IFtdLAogICAgYWN0aXZlU2xpY2VOYW1lOiBudWxsCiAgfSksCiAgbWV0aG9kczogewogICAgeWFuZGV4TWFwc0luaXRpYWxpemF0aW9uICgpIHsKICAgICB0aGlzLm1hcCA9IG5ldyB5bWFwcy5NYXAoJ21hcCcsIHsKICAgICAgICBjZW50ZXI6IFsgMzcuNjQsIDU1Ljc2XSwKICAgICAgICB6b29tOiAxMAogICAgICB9KQogICAgfSwKICAgIGFzeW5jIGdldFJlZ2lvbnNKc29uICgpIHsKICAgICAgY29uc3QgcmVnaW9uc0pzb24gPSBhd2FpdCBheGlvcy5nZXQoJ2h0dHBzOi8vYXBpLmpzb25iaW4uaW8vYi81ZjVjMDg3MGFkMjNiNTdlZjkxMDcxNTcvOCcsCiAgICAgICAgeyBoZWFkZXJzOiB7ICdzZWNyZXQta2V5JzogJyQyYiQxMCRmODBmWHgwMzFvZGRBRHNBUE90TGJPZmFJTnZXaVE4VEllSHJLLmRsNFFuRTZDVEt5RktnRycgfSB9CiAgICAgICkKICAgICAgdGhpcy5yZWdpb25zSnNvbiA9IHJlZ2lvbnNKc29uLmRhdGEKICAgICAgdGhpcy5HZW9Kc29uSGFuZGxlcigpCiAgICB9LAogICAgR2VvSnNvbkhhbmRsZXIgKCkgewogICAgICB0aGlzLnJlZ2lvbnNKc29uLmZlYXR1cmVzLmZvckVhY2gocmVnaW9uID0+IHsKICAgICAgICBpZiAocmVnaW9uLmdlb21ldHJ5LnR5cGUgPT09ICJQb2x5Z29uIikgewogICAgICAgICAgdmFyIHJlZyA9IG5ldyBSZWdpb24ocmVnaW9uLCB0aGlzLm1hcCkKICAgICAgICAgIHRoaXMucmVnaW9ucy5wdXNoKHJlZykKICAgICAgICAgIHJlZy5kaXNwbGF5KCkKICAgICAgICB9IGVsc2UgaWYgKHJlZ2lvbi5nZW9tZXRyeS50eXBlID09PSAiTXVsdGlQb2x5Z29uIikgewogICAgICAgICAgcmVnaW9uLmdlb21ldHJ5LmNvb3JkaW5hdGVzLmZvckVhY2goY29vcmRzID0+IHRoaXMuYWRkTXVsdGlQb2x5Z29uUGFydFRvTWFwKGNvb3JkcywgcmVnaW9uKSk7CiAgICAgICAgfQogICAgICB9KQogICAgICB0aGlzLmdlbmVyYXRlUmFuZG9tUG9pbnRzKDEwMCkKICAgIH0sCiAgICBhZGRNdWx0aVBvbHlnb25QYXJ0VG9NYXAgKGNvb3JkcywgcmVnaW9uKSB7CiAgICAgIHZhciByZWcgPSBuZXcgUmVnaW9uKHJlZ2lvbiwgdGhpcy5tYXAsIHsgJ3R5cGUnOiAnUG9seWdvbicsICdjb29yZGluYXRlcyc6IGNvb3JkcyB9KQogICAgICB0aGlzLnJlZ2lvbnMucHVzaChyZWcpCiAgICAgIHJlZy5kaXNwbGF5KCkKICAgIH0sCiAgICBjbGVhckFsbFBvaW50cyAoKSB7CiAgICAgIHRoaXMucmVnaW9ucy5mb3JFYWNoKHJlZ2lvbiA9PiB7CiAgICAgICAgcmVnaW9uLmNsZWFyUG9pbnRzKCkKICAgICAgfSkKICAgIH0sCiAgICBnZW5lcmF0ZVJhbmRvbVBvaW50cyh2YWx1ZSkgewogICAgICB0aGlzLmNsZWFyQWxsUG9pbnRzKCkKICAgICAgdmFyIGkgPSAwCiAgICAgIHZhciBncm9zc3dlaWdodCA9IDAKICAgICAgdGhpcy5yZWdpb25zLmZvckVhY2gocmVnaW9uID0+IHsKICAgICAgICByZWdpb24uZGlzcGxheSgpCiAgICAgICAgcmVnaW9uLnJhbmdlRnJvbSA9IGdyb3Nzd2VpZ2h0LnRvRml4ZWQoNSkKICAgICAgICBncm9zc3dlaWdodCArPSBwYXJzZUZsb2F0KHJlZ2lvbi53ZWlnaHQpCiAgICAgICAgcmVnaW9uLnJhbmdlVG8gPSBncm9zc3dlaWdodC50b0ZpeGVkKDUpCiAgICAgIH0pCiAgICAgIHdoaWxlIChpIDw9IHZhbHVlKSB7CiAgICAgICAgdmFyIHJhbmRvbVZhbHVlID0gKChNYXRoLnJhbmRvbSgpICogZ3Jvc3N3ZWlnaHQpLnRvRml4ZWQoNSkpCiAgICAgICAgdGhpcy5yZWdpb25zLmZvckVhY2gocmVnaW9uID0+IHsKICAgICAgICAgIGlmIChyYW5kb21WYWx1ZSA8PSByZWdpb24ucmFuZ2VUbyAmJiByYW5kb21WYWx1ZSA+IHJlZ2lvbi5yYW5nZUZyb20pIHsKICAgICAgICAgICAgcmVnaW9uLmdlbmVyYXRlUmFuZG9tUG9pbnQoKQogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgICAgaSsrCiAgICAgIH0KICAgICAgY29uc29sZS5sb2coJzExMScpCiAgICAgIHRoaXMuZ2VuZXJhdGVDaGFydERhdGEoKQogICAgfSwKICAgIGdlbmVyYXRlQ2hhcnREYXRhICgpIHsKICAgICAgdmFyIGNoYXJ0RGF0YSA9IFtdCiAgICAgIHZhciBjb21iaW5lZFJlZ2lvbnMgPSBuZXcgTWFwCiAgICAgIHRoaXMucmVnaW9ucy5mb3JFYWNoKHJlZ2lvbiA9PiB7CiAgICAgICAgaWYgKGNvbWJpbmVkUmVnaW9ucy5oYXMocmVnaW9uLm5hbWUpKSB7CiAgICAgICAgICB2YXIgdmFsdWUgPSBjb21iaW5lZFJlZ2lvbnMuZ2V0KHJlZ2lvbi5uYW1lKQogICAgICAgICAgdmFsdWUucG9pbnRzICs9IHJlZ2lvbi5wb2ludHMubGVuZ3RoCiAgICAgICAgICBjb21iaW5lZFJlZ2lvbnMuc2V0KHJlZ2lvbi5uYW1lLCB2YWx1ZSkKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY29uc29sZS5sb2cocmVnaW9uLmNvbG9yKQogICAgICAgICAgY29tYmluZWRSZWdpb25zLnNldChyZWdpb24ubmFtZSwgeyByZWdpb246IHJlZ2lvbi5uYW1lLCBwb2ludHM6IHJlZ2lvbi5wb2ludHMubGVuZ3RoLCBjb2xvcjogcmVnaW9uLmNvbG9yIH0pCiAgICAgICAgfQogICAgICB9KQogICAgICBmb3IgKGxldCB2YWx1ZSBvZiBjb21iaW5lZFJlZ2lvbnMudmFsdWVzKCkpIHsKICAgICAgICBjaGFydERhdGEucHVzaCh2YWx1ZSkKICAgICAgfQogICAgICB0aGlzLmNoYXJ0RGF0YSA9IGNoYXJ0RGF0YQogICAgICB0aGlzLmNoYXJ0SGFuZGxlcigpCiAgICB9LAogICAgY2hhcnRIYW5kbGVyICgpIHsKICAgICAgdmFyIGNoYXJ0ID0gYW00Y29yZS5jcmVhdGUodGhpcy4kcmVmcy5jaGFydGRpdiwgYW00Y2hhcnRzLlBpZUNoYXJ0KTsKICAgICAgY2hhcnQuaGlkZGVuU3RhdGUucHJvcGVydGllcy5vcGFjaXR5ID0gMDsKICAgICAgY2hhcnQuZGF0YSA9IHRoaXMuY2hhcnREYXRhCiAgICAgIGNoYXJ0LmlubmVyUmFkaXVzID0gYW00Y29yZS5wZXJjZW50KDQwKTsKICAgICAgY2hhcnQuZGVwdGggPSAxMjA7CiAgICAgIGNoYXJ0LmxlZ2VuZCA9IG5ldyBhbTRjaGFydHMuTGVnZW5kKCk7CiAgICAgIHZhciBzZXJpZXMgPSBjaGFydC5zZXJpZXMucHVzaChuZXcgYW00Y2hhcnRzLlBpZVNlcmllcygpKTsKICAgICAgc2VyaWVzLmRhdGFGaWVsZHMudmFsdWUgPSAicG9pbnRzIjsKICAgICAgc2VyaWVzLmRhdGFGaWVsZHMuZGVwdGhWYWx1ZSA9ICJwb2ludHMiOwogICAgICBzZXJpZXMuZGF0YUZpZWxkcy5jYXRlZ29yeSA9ICJyZWdpb24iOwogICAgICBzZXJpZXMuc2xpY2VzLnRlbXBsYXRlLmNvcm5lclJhZGl1cyA9IDM7CiAgICAgIHNlcmllcy5jb2xvcnMuc3RlcCA9IDM7CiAgICAgIHNlcmllcy5zbGljZXMudGVtcGxhdGUuZXZlbnRzLm9uKCJoaXQiLCB0aGlzLnNsaWNlQ2xpY2tIYW5kbGVyKQogICAgfSwKICAgIHNsaWNlQ2xpY2tIYW5kbGVyIChldmVudCkgewogICAgICB2YXIgc2xpY2VOYW1lID0gZXZlbnQudGFyZ2V0LnNsaWNlLmRhdGFJdGVtLl9kYXRhQ29udGV4dC5yZWdpb24KICAgICAgaWYgKHNsaWNlTmFtZSAhPT0gdGhpcy5hY3RpdmVTbGljZU5hbWUpIHsKICAgICAgICB0aGlzLnJlZ2lvbnMuZm9yRWFjaChyZWdpb24gPT4gewogICAgICAgICAgaWYgKHJlZ2lvbi5uYW1lICE9PSBzbGljZU5hbWUpIHsKICAgICAgICAgICAgcmVnaW9uLmhpZGUoKQogICAgICAgICAgICByZWdpb24ucG9pbnRzLmZvckVhY2gocG9pbnQgPT4gewogICAgICAgICAgICAgIHBvaW50LmhpZGUoKQogICAgICAgICAgICB9KQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy5hY3RpdmVTbGljZU5hbWUgPSBzbGljZU5hbWUKICAgICAgICAgICAgcmVnaW9uLmRpc3BsYXkoKQogICAgICAgICAgICByZWdpb24ucG9pbnRzLmZvckVhY2gocG9pbnQgPT4gewogICAgICAgICAgICAgIHBvaW50LmRpc3BsYXkoKQogICAgICAgICAgICB9KQogICAgICAgICAgfQogICAgICB9KQogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMucmVnaW9ucy5mb3JFYWNoKHJlZ2lvbiA9PiB7CiAgICAgICAgICByZWdpb24uZGlzcGxheSgpCiAgICAgICAgfSkKICAgICAgfQogICAgfQogIH0sCiAgYXN5bmMgY3JlYXRlZCAoKSB7CiAgICBhd2FpdCB0aGlzLmdldFJlZ2lvbnNKc29uKCkKICB9LAogIGFzeW5jIG1vdW50ZWQgKCkgewogICAgYXdhaXQgeW1hcHMucmVhZHkodGhpcy55YW5kZXhNYXBzSW5pdGlhbGl6YXRpb24pCiAgfSwKICBiZWZvcmVEZXN0cm95KCkgewogICAgaWYgKHRoaXMuY2hhcnQpIHsKICAgICAgdGhpcy5jaGFydC5kaXNwb3NlKCk7CiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["MapMoscow.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"MapMoscow.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"moscow-map\">\n    <div class=\"moscow-map__chart\" ref=\"chartdiv\"></div>\n    <v-btn class=\"moscow-map__refresh_button\" @click=\"generateRandomPoints(100)\">Сгенерировать</v-btn>\n    <div id=\"map\" class=\"moscow-map__map\"></div>\n  </div>\n</template>\n\n<script>\nimport * as axios from 'axios'\nimport Region from \"@/models/region\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n\n\nexport default {\n  name: 'MapMoscow',\n  data: () => ({\n    map: null,\n    regionsJson: null,\n    regions: [],\n    loading: false,\n    chartData: [],\n    activeSliceName: null\n  }),\n  methods: {\n    yandexMapsInitialization () {\n     this.map = new ymaps.Map('map', {\n        center: [ 37.64, 55.76],\n        zoom: 10\n      })\n    },\n    async getRegionsJson () {\n      const regionsJson = await axios.get('https://api.jsonbin.io/b/5f5c0870ad23b57ef9107157/8',\n        { headers: { 'secret-key': '$2b$10$f80fXx031oddADsAPOtLbOfaINvWiQ8TIeHrK.dl4QnE6CTKyFKgG' } }\n      )\n      this.regionsJson = regionsJson.data\n      this.GeoJsonHandler()\n    },\n    GeoJsonHandler () {\n      this.regionsJson.features.forEach(region => {\n        if (region.geometry.type === \"Polygon\") {\n          var reg = new Region(region, this.map)\n          this.regions.push(reg)\n          reg.display()\n        } else if (region.geometry.type === \"MultiPolygon\") {\n          region.geometry.coordinates.forEach(coords => this.addMultiPolygonPartToMap(coords, region));\n        }\n      })\n      this.generateRandomPoints(100)\n    },\n    addMultiPolygonPartToMap (coords, region) {\n      var reg = new Region(region, this.map, { 'type': 'Polygon', 'coordinates': coords })\n      this.regions.push(reg)\n      reg.display()\n    },\n    clearAllPoints () {\n      this.regions.forEach(region => {\n        region.clearPoints()\n      })\n    },\n    generateRandomPoints(value) {\n      this.clearAllPoints()\n      var i = 0\n      var grossweight = 0\n      this.regions.forEach(region => {\n        region.display()\n        region.rangeFrom = grossweight.toFixed(5)\n        grossweight += parseFloat(region.weight)\n        region.rangeTo = grossweight.toFixed(5)\n      })\n      while (i <= value) {\n        var randomValue = ((Math.random() * grossweight).toFixed(5))\n        this.regions.forEach(region => {\n          if (randomValue <= region.rangeTo && randomValue > region.rangeFrom) {\n            region.generateRandomPoint()\n          }\n        })\n        i++\n      }\n      console.log('111')\n      this.generateChartData()\n    },\n    generateChartData () {\n      var chartData = []\n      var combinedRegions = new Map\n      this.regions.forEach(region => {\n        if (combinedRegions.has(region.name)) {\n          var value = combinedRegions.get(region.name)\n          value.points += region.points.length\n          combinedRegions.set(region.name, value)\n        } else {\n          console.log(region.color)\n          combinedRegions.set(region.name, { region: region.name, points: region.points.length, color: region.color })\n        }\n      })\n      for (let value of combinedRegions.values()) {\n        chartData.push(value)\n      }\n      this.chartData = chartData\n      this.chartHandler()\n    },\n    chartHandler () {\n      var chart = am4core.create(this.$refs.chartdiv, am4charts.PieChart);\n      chart.hiddenState.properties.opacity = 0;\n      chart.data = this.chartData\n      chart.innerRadius = am4core.percent(40);\n      chart.depth = 120;\n      chart.legend = new am4charts.Legend();\n      var series = chart.series.push(new am4charts.PieSeries());\n      series.dataFields.value = \"points\";\n      series.dataFields.depthValue = \"points\";\n      series.dataFields.category = \"region\";\n      series.slices.template.cornerRadius = 3;\n      series.colors.step = 3;\n      series.slices.template.events.on(\"hit\", this.sliceClickHandler)\n    },\n    sliceClickHandler (event) {\n      var sliceName = event.target.slice.dataItem._dataContext.region\n      if (sliceName !== this.activeSliceName) {\n        this.regions.forEach(region => {\n          if (region.name !== sliceName) {\n            region.hide()\n            region.points.forEach(point => {\n              point.hide()\n            })\n          } else {\n            this.activeSliceName = sliceName\n            region.display()\n            region.points.forEach(point => {\n              point.display()\n            })\n          }\n      })\n      } else {\n        this.regions.forEach(region => {\n          region.display()\n        })\n      }\n    }\n  },\n  async created () {\n    await this.getRegionsJson()\n  },\n  async mounted () {\n    await ymaps.ready(this.yandexMapsInitialization)\n  },\n  beforeDestroy() {\n    if (this.chart) {\n      this.chart.dispose();\n    }\n  }\n}\n</script>\n<style scoped>\n.moscow-map {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  width: 100%;\n}\n.moscow-map__chart {\n  width: 100%;\n  height: 40%;\n  font-size: 12px;\n}\n.moscow-map__map {\n  width: 100%;\n  height: 60%;\n}\n</style>\n"]}]}