{"remainingRequest":"/home/joost/workflow/MoscowMap/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/joost/workflow/MoscowMap/src/components/MapMoscow.vue?vue&type=style&index=0&id=1774ae56&scoped=true&lang=css&","dependencies":[{"path":"/home/joost/workflow/MoscowMap/src/components/MapMoscow.vue","mtime":1600054847969},{"path":"/home/joost/workflow/MoscowMap/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/joost/workflow/MoscowMap/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/joost/workflow/MoscowMap/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/joost/workflow/MoscowMap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/joost/workflow/MoscowMap/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLm1vc2Nvdy1tYXAgewogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICBoZWlnaHQ6IDEwMHZoOwogIHdpZHRoOiAxMDAlOwp9Ci5tb3Njb3ctbWFwX19jaGFydCB7CiAgd2lkdGg6IDEwMCU7CiAgaGVpZ2h0OiA0MCU7CiAgZm9udC1zaXplOiAxMnB4Owp9Ci5tb3Njb3ctbWFwX19tYXAgewogIHdpZHRoOiAxMDAlOwogIGhlaWdodDogNjAlOwp9Cg=="},{"version":3,"sources":["MapMoscow.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"MapMoscow.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"moscow-map\">\n    <div class=\"moscow-map__chart\" ref=\"chartdiv\"></div>\n    <v-btn class=\"moscow-map__refresh_button\" @click=\"generateRandomPoints(100)\">Сгенерировать</v-btn>\n    <div id=\"map\" class=\"moscow-map__map\"></div>\n  </div>\n</template>\n\n<script>\nimport * as axios from 'axios'\nimport Region from \"@/models/region\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n\n\nexport default {\n  name: 'MapMoscow',\n  data: () => ({\n    map: null,\n    regionsJson: null,\n    regions: [],\n    loading: false,\n    chartData: [],\n    activeSliceName: null\n  }),\n  methods: {\n    yandexMapsInitialization () {\n     this.map = new ymaps.Map('map', {\n        center: [ 37.64, 55.76],\n        zoom: 10\n      })\n    },\n    async getRegionsJson () {\n      const regionsJson = await axios.get('https://api.jsonbin.io/b/5f5c0870ad23b57ef9107157/8',\n        { headers: { 'secret-key': '$2b$10$f80fXx031oddADsAPOtLbOfaINvWiQ8TIeHrK.dl4QnE6CTKyFKgG' } }\n      )\n      this.regionsJson = regionsJson.data\n      this.GeoJsonHandler()\n    },\n    GeoJsonHandler () {\n      this.regionsJson.features.forEach(region => {\n        if (region.geometry.type === \"Polygon\") {\n          var reg = new Region(region, this.map)\n          this.regions.push(reg)\n          reg.display()\n        } else if (region.geometry.type === \"MultiPolygon\") {\n          region.geometry.coordinates.forEach(coords => this.addMultiPolygonPartToMap(coords, region));\n        }\n      })\n      this.generateRandomPoints(100)\n    },\n    addMultiPolygonPartToMap (coords, region) {\n      var reg = new Region(region, this.map, { 'type': 'Polygon', 'coordinates': coords })\n      this.regions.push(reg)\n      reg.display()\n    },\n    clearAllPoints () {\n      this.regions.forEach(region => {\n        region.clearPoints()\n      })\n    },\n    generateRandomPoints(value) {\n      this.clearAllPoints()\n      var i = 0\n      var grossweight = 0\n      this.regions.forEach(region => {\n        region.display()\n        region.rangeFrom = grossweight.toFixed(5)\n        grossweight += parseFloat(region.weight)\n        region.rangeTo = grossweight.toFixed(5)\n      })\n      while (i <= value) {\n        var randomValue = ((Math.random() * grossweight).toFixed(5))\n        this.regions.forEach(region => {\n          if (randomValue <= region.rangeTo && randomValue > region.rangeFrom) {\n            region.generateRandomPoint()\n          }\n        })\n        i++\n      }\n      console.log('111')\n      this.generateChartData()\n    },\n    generateChartData () {\n      var chartData = []\n      var combinedRegions = new Map\n      this.regions.forEach(region => {\n        if (combinedRegions.has(region.name)) {\n          var value = combinedRegions.get(region.name)\n          value.points += region.points.length\n          combinedRegions.set(region.name, value)\n        } else {\n          console.log(region.color)\n          combinedRegions.set(region.name, { region: region.name, points: region.points.length, color: region.color })\n        }\n      })\n      for (let value of combinedRegions.values()) {\n        chartData.push(value)\n      }\n      this.chartData = chartData\n      this.chartHandler()\n    },\n    chartHandler () {\n      var chart = am4core.create(this.$refs.chartdiv, am4charts.PieChart);\n      chart.hiddenState.properties.opacity = 0;\n      chart.data = this.chartData\n      chart.innerRadius = am4core.percent(40);\n      chart.depth = 120;\n      chart.legend = new am4charts.Legend();\n      var series = chart.series.push(new am4charts.PieSeries());\n      series.dataFields.value = \"points\";\n      series.dataFields.depthValue = \"points\";\n      series.dataFields.category = \"region\";\n      series.slices.template.cornerRadius = 3;\n      series.colors.step = 3;\n      series.slices.template.events.on(\"hit\", this.sliceClickHandler)\n    },\n    sliceClickHandler (event) {\n      var sliceName = event.target.slice.dataItem._dataContext.region\n      if (sliceName !== this.activeSliceName) {\n        this.regions.forEach(region => {\n          if (region.name !== sliceName) {\n            region.hide()\n            region.points.forEach(point => {\n              point.hide()\n            })\n          } else {\n            this.activeSliceName = sliceName\n            region.display()\n            region.points.forEach(point => {\n              point.display()\n            })\n          }\n      })\n      } else {\n        this.regions.forEach(region => {\n          region.display()\n        })\n      }\n    }\n  },\n  async created () {\n    await this.getRegionsJson()\n  },\n  async mounted () {\n    await ymaps.ready(this.yandexMapsInitialization)\n  },\n  beforeDestroy() {\n    if (this.chart) {\n      this.chart.dispose();\n    }\n  }\n}\n</script>\n<style scoped>\n.moscow-map {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  width: 100%;\n}\n.moscow-map__chart {\n  width: 100%;\n  height: 40%;\n  font-size: 12px;\n}\n.moscow-map__map {\n  width: 100%;\n  height: 60%;\n}\n</style>\n"]}]}