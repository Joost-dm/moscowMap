{"remainingRequest":"/home/joost/workflow/MoscowMap/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/joost/workflow/MoscowMap/src/components/MapMoscow.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/joost/workflow/MoscowMap/src/components/MapMoscow.vue","mtime":1600090827842},{"path":"/home/joost/workflow/MoscowMap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/joost/workflow/MoscowMap/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/joost/workflow/MoscowMap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/joost/workflow/MoscowMap/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCAqIGFzIGF4aW9zIGZyb20gJ2F4aW9zJwppbXBvcnQgUmVnaW9uIGZyb20gIkAvbW9kZWxzL3JlZ2lvbiI7CmltcG9ydCAqIGFzIGFtNGNvcmUgZnJvbSAiQGFtY2hhcnRzL2FtY2hhcnRzNC9jb3JlIjsKaW1wb3J0ICogYXMgYW00Y2hhcnRzIGZyb20gIkBhbWNoYXJ0cy9hbWNoYXJ0czQvY2hhcnRzIjsKaW1wb3J0IGFtNHRoZW1lc19hbmltYXRlZCBmcm9tICJAYW1jaGFydHMvYW1jaGFydHM0L3RoZW1lcy9hbmltYXRlZCI7CgoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdNYXBNb3Njb3cnLAogIGRhdGE6ICgpID0+ICh7CiAgICBtYXA6IG51bGwsCiAgICByZWdpb25zSnNvbjogbnVsbCwKICAgIHJlZ2lvbnM6IFtdLAogICAgbG9hZGluZzogZmFsc2UsCiAgICBjaGFydERhdGE6IFtdLAogICAgYWN0aXZlU2xpY2VOYW1lOiBudWxsCiAgfSksCiAgbWV0aG9kczogewogICAgeWFuZGV4TWFwc0luaXRpYWxpemF0aW9uICgpIHsKICAgICB0aGlzLm1hcCA9IG5ldyB5bWFwcy5NYXAoJ21hcCcsIHsKICAgICAgICBjZW50ZXI6IFsgMzcuNjQsIDU1Ljc2XSwKICAgICAgICB6b29tOiAxMAogICAgICB9KQogICAgICB0aGlzLm1hcC5sYXllcnMuYWRkKG5ldyB5bWFwcy5MYXllcignaHR0cDovL3RpbGUub3BlbnN0cmVldG1hcC5vcmcvJXovJXgvJXkucG5nJywgewogICAgICAgICAgcHJvamVjdGlvbjogeW1hcHMucHJvamVjdGlvbi5zcGhlcmljYWxNZXJjYXRvcgogICAgICB9KSk7CiAgICAgdGhpcy5tYXAuY29weXJpZ2h0cy5hZGQoJyZjb3B5OyBPcGVuU3RyZWV0TWFwIGNvbnRyaWJ1dG9ycywgQ0MtQlktU0EnKTsKICAgIH0sCiAgICBhc3luYyBnZXRSZWdpb25zSnNvbiAoKSB7CiAgICAgIGNvbnN0IHJlZ2lvbnNKc29uID0gYXdhaXQgYXhpb3MuZ2V0KCdodHRwczovL2FwaS5qc29uYmluLmlvL2IvNWY1YzA4NzBhZDIzYjU3ZWY5MTA3MTU3LzgnLAogICAgICAgIHsgaGVhZGVyczogeyAnc2VjcmV0LWtleSc6ICckMmIkMTAkZjgwZlh4MDMxb2RkQURzQVBPdExiT2ZhSU52V2lROFRJZUhySy5kbDRRbkU2Q1RLeUZLZ0cnIH0gfQogICAgICApCiAgICAgIHRoaXMucmVnaW9uc0pzb24gPSByZWdpb25zSnNvbi5kYXRhCiAgICAgIHRoaXMuR2VvSnNvbkhhbmRsZXIoKQogICAgfSwKICAgIEdlb0pzb25IYW5kbGVyICgpIHsKICAgICAgdGhpcy5yZWdpb25zSnNvbi5mZWF0dXJlcy5mb3JFYWNoKHJlZ2lvbiA9PiB7CiAgICAgICAgaWYgKHJlZ2lvbi5nZW9tZXRyeS50eXBlID09PSAiUG9seWdvbiIpIHsKICAgICAgICAgIHZhciByZWcgPSBuZXcgUmVnaW9uKHJlZ2lvbiwgdGhpcy5tYXApCiAgICAgICAgICB0aGlzLnJlZ2lvbnMucHVzaChyZWcpCiAgICAgICAgICByZWcuZGlzcGxheSgpCiAgICAgICAgfSBlbHNlIGlmIChyZWdpb24uZ2VvbWV0cnkudHlwZSA9PT0gIk11bHRpUG9seWdvbiIpIHsKICAgICAgICAgIHJlZ2lvbi5nZW9tZXRyeS5jb29yZGluYXRlcy5mb3JFYWNoKGNvb3JkcyA9PiB0aGlzLmFkZE11bHRpUG9seWdvblBhcnRUb01hcChjb29yZHMsIHJlZ2lvbikpOwogICAgICAgIH0KICAgICAgfSkKICAgICAgdGhpcy5nZW5lcmF0ZVJhbmRvbVBvaW50cygxMDApCiAgICB9LAogICAgYWRkTXVsdGlQb2x5Z29uUGFydFRvTWFwIChjb29yZHMsIHJlZ2lvbikgewogICAgICB2YXIgcmVnID0gbmV3IFJlZ2lvbihyZWdpb24sIHRoaXMubWFwLCB7ICd0eXBlJzogJ1BvbHlnb24nLCAnY29vcmRpbmF0ZXMnOiBjb29yZHMgfSkKICAgICAgdGhpcy5yZWdpb25zLnB1c2gocmVnKQogICAgICByZWcuZGlzcGxheSgpCiAgICB9LAogICAgY2xlYXJBbGxQb2ludHMgKCkgewogICAgICB0aGlzLnJlZ2lvbnMuZm9yRWFjaChyZWdpb24gPT4gewogICAgICAgIHJlZ2lvbi5pc0FjdGl2ZSA9IGZhbHNlCiAgICAgICAgcmVnaW9uLmNsZWFyUG9pbnRzKCkKICAgICAgfSkKICAgIH0sCiAgICBnZW5lcmF0ZVJhbmRvbVBvaW50cyh2YWx1ZSkgewogICAgICB0aGlzLmNsZWFyQWxsUG9pbnRzKCkKICAgICAgdmFyIGkgPSAwCiAgICAgIHZhciBncm9zc3dlaWdodCA9IDAKICAgICAgdGhpcy5yZWdpb25zLmZvckVhY2gocmVnaW9uID0+IHsKICAgICAgICByZWdpb24uZGlzcGxheSgpCiAgICAgICAgcmVnaW9uLnJhbmdlRnJvbSA9IGdyb3Nzd2VpZ2h0LnRvRml4ZWQoNSkKICAgICAgICBncm9zc3dlaWdodCArPSBwYXJzZUZsb2F0KHJlZ2lvbi53ZWlnaHQpCiAgICAgICAgcmVnaW9uLnJhbmdlVG8gPSBncm9zc3dlaWdodC50b0ZpeGVkKDUpCiAgICAgIH0pCiAgICAgIHdoaWxlIChpIDwgdmFsdWUpIHsKICAgICAgICB2YXIgcmFuZG9tVmFsdWUgPSAoTWF0aC5yYW5kb20oKSAqIGdyb3Nzd2VpZ2h0KQogICAgICAgIHRoaXMucmVnaW9ucy5mb3JFYWNoKHJlZ2lvbiA9PiB7CiAgICAgICAgICBpZiAocmFuZG9tVmFsdWUgPD0gcmVnaW9uLnJhbmdlVG8gJiYgcmFuZG9tVmFsdWUgPj0gcmVnaW9uLnJhbmdlRnJvbSkgewogICAgICAgICAgICByZWdpb24uZ2VuZXJhdGVSYW5kb21Qb2ludCgpCiAgICAgICAgICB9CiAgICAgICAgfSkKCiAgICAgICAgKytpCiAgICAgIH0KICAgICAgdGhpcy5nZW5lcmF0ZUNoYXJ0RGF0YSgpCiAgICB9LAogICAgZ2VuZXJhdGVDaGFydERhdGEgKCkgewogICAgICB2YXIgY2hhcnREYXRhID0gW10KICAgICAgdmFyIGNvbWJpbmVkUmVnaW9ucyA9IG5ldyBNYXAKICAgICAgdGhpcy5yZWdpb25zLmZvckVhY2gocmVnaW9uID0+IHsKICAgICAgICBpZiAoY29tYmluZWRSZWdpb25zLmhhcyhyZWdpb24ubmFtZSkpIHsKICAgICAgICAgIHZhciB2YWx1ZSA9IGNvbWJpbmVkUmVnaW9ucy5nZXQocmVnaW9uLm5hbWUpCiAgICAgICAgICB2YWx1ZS5wb2ludHMgKz0gcmVnaW9uLnBvaW50cy5sZW5ndGgKICAgICAgICAgIGNvbWJpbmVkUmVnaW9ucy5zZXQocmVnaW9uLm5hbWUsIHZhbHVlKQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjb21iaW5lZFJlZ2lvbnMuc2V0KHJlZ2lvbi5uYW1lLCB7IHJlZ2lvbjogcmVnaW9uLm5hbWUsIHBvaW50czogcmVnaW9uLnBvaW50cy5sZW5ndGgsIGNvbG9yOiByZWdpb24uY29sb3IgfSkKICAgICAgICB9CiAgICAgIH0pCiAgICAgIGZvciAobGV0IHZhbHVlIG9mIGNvbWJpbmVkUmVnaW9ucy52YWx1ZXMoKSkgewogICAgICAgIGNoYXJ0RGF0YS5wdXNoKHZhbHVlKQogICAgICB9CiAgICAgIHRoaXMuY2hhcnREYXRhID0gY2hhcnREYXRhCiAgICAgIHRoaXMuY2hhcnRIYW5kbGVyKCkKICAgIH0sCiAgICBjaGFydEhhbmRsZXIgKCkgewogICAgICB2YXIgY2hhcnQgPSBhbTRjb3JlLmNyZWF0ZSh0aGlzLiRyZWZzLmNoYXJ0ZGl2LCBhbTRjaGFydHMuUGllQ2hhcnQpOwogICAgICBjaGFydC5oaWRkZW5TdGF0ZS5wcm9wZXJ0aWVzLm9wYWNpdHkgPSAwOwogICAgICBjaGFydC5kYXRhID0gdGhpcy5jaGFydERhdGEKICAgICAgY2hhcnQuaW5uZXJSYWRpdXMgPSBhbTRjb3JlLnBlcmNlbnQoNDApOwogICAgICBjaGFydC5kZXB0aCA9IDEyMDsKICAgICAgY2hhcnQubGVnZW5kID0gbmV3IGFtNGNoYXJ0cy5MZWdlbmQoKTsKICAgICAgdmFyIHNlcmllcyA9IGNoYXJ0LnNlcmllcy5wdXNoKG5ldyBhbTRjaGFydHMuUGllU2VyaWVzKCkpOwogICAgICBzZXJpZXMuZGF0YUZpZWxkcy52YWx1ZSA9ICJwb2ludHMiOwogICAgICBzZXJpZXMuZGF0YUZpZWxkcy5kZXB0aFZhbHVlID0gInBvaW50cyI7CiAgICAgIHNlcmllcy5kYXRhRmllbGRzLmNhdGVnb3J5ID0gInJlZ2lvbiI7CiAgICAgIHNlcmllcy5zbGljZXMudGVtcGxhdGUuY29ybmVyUmFkaXVzID0gMzsKICAgICAgc2VyaWVzLmNvbG9ycy5zdGVwID0gMzsKICAgICAgc2VyaWVzLnNsaWNlcy50ZW1wbGF0ZS5ldmVudHMub24oImhpdCIsIHRoaXMuc2xpY2VDbGlja0hhbmRsZXIpCiAgICB9LAogICAgc2xpY2VDbGlja0hhbmRsZXIgKGV2ZW50KSB7CiAgICAgIHZhciBzbGljZU5hbWUgPSBldmVudC50YXJnZXQuc2xpY2UuZGF0YUl0ZW0uX2RhdGFDb250ZXh0LnJlZ2lvbgogICAgICB2YXIgYWN0aXZlQ291bnRlciA9IDAKICAgICAgdGhpcy5yZWdpb25zLmZvckVhY2gocmVnaW9uID0+IHsKICAgICAgICBpZiAoKHJlZ2lvbi5uYW1lICE9PSBzbGljZU5hbWUgJiYgIXJlZ2lvbi5pc0FjdGl2ZSkgfHwgKHJlZ2lvbi5uYW1lID09PSBzbGljZU5hbWUgJiYgcmVnaW9uLmlzQWN0aXZlKSkgewogICAgICAgICAgcmVnaW9uLmlzQWN0aXZlID0gZmFsc2UKICAgICAgICAgIHJlZ2lvbi5oaWRlKCkKICAgICAgICAgIHJlZ2lvbi5wb2ludHMuZm9yRWFjaChwb2ludCA9PiB7CiAgICAgICAgICAgIHBvaW50LmhpZGUoKQogICAgICAgICAgfSkKICAgICAgICB9IGVsc2UgaWYgKHJlZ2lvbi5uYW1lID09PSBzbGljZU5hbWUgJiYgIXJlZ2lvbi5pc0FjdGl2ZSkgewogICAgICAgICAgdGhpcy5hY3RpdmVTbGljZU5hbWUgPSBzbGljZU5hbWUKICAgICAgICAgIHJlZ2lvbi5pc0FjdGl2ZSA9IHRydWUKICAgICAgICAgIHJlZ2lvbi5kaXNwbGF5KCkKICAgICAgICAgIHJlZ2lvbi5wb2ludHMuZm9yRWFjaChwb2ludCA9PiB7CiAgICAgICAgICAgIHBvaW50LmRpc3BsYXkoKQogICAgICAgICAgfSkKICAgICAgICB9CiAgICAgICAgYWN0aXZlQ291bnRlcisrCiAgICAgIH0pCiAgICAgIGlmIChhY3RpdmVDb3VudGVyID09PSAwKSB7CiAgICAgICAgdGhpcy5yZWdpb25zLmZvckVhY2gocmVnaW9uID0+IHsKICAgICAgICAgIHJlZ2lvbi5kaXNwbGF5KCkKICAgICAgICAgIHJlZ2lvbi5wb2ludHMuZm9yRWFjaChwb2ludCA9PiB7CiAgICAgICAgICAgIHBvaW50LmRpc3BsYXkoKQogICAgICAgICAgfSkKICAgICAgICB9KQogICAgICB9CiAgICB9CiAgfSwKICBhc3luYyBjcmVhdGVkICgpIHsKICAgIGF3YWl0IHRoaXMuZ2V0UmVnaW9uc0pzb24oKQogIH0sCiAgYXN5bmMgbW91bnRlZCAoKSB7CiAgICBhd2FpdCB5bWFwcy5yZWFkeSh0aGlzLnlhbmRleE1hcHNJbml0aWFsaXphdGlvbikKICB9LAogIGJlZm9yZURlc3Ryb3koKSB7CiAgICBpZiAodGhpcy5jaGFydCkgewogICAgICB0aGlzLmNoYXJ0LmRpc3Bvc2UoKTsKICAgIH0KICB9Cn0K"},{"version":3,"sources":["MapMoscow.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"MapMoscow.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"moscow-map\">\n    <div class=\"moscow-map__chart\" ref=\"chartdiv\"></div>\n    <v-btn class=\"moscow-map__refresh_button\" @click=\"generateRandomPoints(100)\">Сгенерировать</v-btn>\n    <div id=\"map\" class=\"moscow-map__map\"></div>\n  </div>\n</template>\n\n<script>\nimport * as axios from 'axios'\nimport Region from \"@/models/region\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n\n\nexport default {\n  name: 'MapMoscow',\n  data: () => ({\n    map: null,\n    regionsJson: null,\n    regions: [],\n    loading: false,\n    chartData: [],\n    activeSliceName: null\n  }),\n  methods: {\n    yandexMapsInitialization () {\n     this.map = new ymaps.Map('map', {\n        center: [ 37.64, 55.76],\n        zoom: 10\n      })\n      this.map.layers.add(new ymaps.Layer('http://tile.openstreetmap.org/%z/%x/%y.png', {\n          projection: ymaps.projection.sphericalMercator\n      }));\n     this.map.copyrights.add('&copy; OpenStreetMap contributors, CC-BY-SA');\n    },\n    async getRegionsJson () {\n      const regionsJson = await axios.get('https://api.jsonbin.io/b/5f5c0870ad23b57ef9107157/8',\n        { headers: { 'secret-key': '$2b$10$f80fXx031oddADsAPOtLbOfaINvWiQ8TIeHrK.dl4QnE6CTKyFKgG' } }\n      )\n      this.regionsJson = regionsJson.data\n      this.GeoJsonHandler()\n    },\n    GeoJsonHandler () {\n      this.regionsJson.features.forEach(region => {\n        if (region.geometry.type === \"Polygon\") {\n          var reg = new Region(region, this.map)\n          this.regions.push(reg)\n          reg.display()\n        } else if (region.geometry.type === \"MultiPolygon\") {\n          region.geometry.coordinates.forEach(coords => this.addMultiPolygonPartToMap(coords, region));\n        }\n      })\n      this.generateRandomPoints(100)\n    },\n    addMultiPolygonPartToMap (coords, region) {\n      var reg = new Region(region, this.map, { 'type': 'Polygon', 'coordinates': coords })\n      this.regions.push(reg)\n      reg.display()\n    },\n    clearAllPoints () {\n      this.regions.forEach(region => {\n        region.isActive = false\n        region.clearPoints()\n      })\n    },\n    generateRandomPoints(value) {\n      this.clearAllPoints()\n      var i = 0\n      var grossweight = 0\n      this.regions.forEach(region => {\n        region.display()\n        region.rangeFrom = grossweight.toFixed(5)\n        grossweight += parseFloat(region.weight)\n        region.rangeTo = grossweight.toFixed(5)\n      })\n      while (i < value) {\n        var randomValue = (Math.random() * grossweight)\n        this.regions.forEach(region => {\n          if (randomValue <= region.rangeTo && randomValue >= region.rangeFrom) {\n            region.generateRandomPoint()\n          }\n        })\n\n        ++i\n      }\n      this.generateChartData()\n    },\n    generateChartData () {\n      var chartData = []\n      var combinedRegions = new Map\n      this.regions.forEach(region => {\n        if (combinedRegions.has(region.name)) {\n          var value = combinedRegions.get(region.name)\n          value.points += region.points.length\n          combinedRegions.set(region.name, value)\n        } else {\n          combinedRegions.set(region.name, { region: region.name, points: region.points.length, color: region.color })\n        }\n      })\n      for (let value of combinedRegions.values()) {\n        chartData.push(value)\n      }\n      this.chartData = chartData\n      this.chartHandler()\n    },\n    chartHandler () {\n      var chart = am4core.create(this.$refs.chartdiv, am4charts.PieChart);\n      chart.hiddenState.properties.opacity = 0;\n      chart.data = this.chartData\n      chart.innerRadius = am4core.percent(40);\n      chart.depth = 120;\n      chart.legend = new am4charts.Legend();\n      var series = chart.series.push(new am4charts.PieSeries());\n      series.dataFields.value = \"points\";\n      series.dataFields.depthValue = \"points\";\n      series.dataFields.category = \"region\";\n      series.slices.template.cornerRadius = 3;\n      series.colors.step = 3;\n      series.slices.template.events.on(\"hit\", this.sliceClickHandler)\n    },\n    sliceClickHandler (event) {\n      var sliceName = event.target.slice.dataItem._dataContext.region\n      var activeCounter = 0\n      this.regions.forEach(region => {\n        if ((region.name !== sliceName && !region.isActive) || (region.name === sliceName && region.isActive)) {\n          region.isActive = false\n          region.hide()\n          region.points.forEach(point => {\n            point.hide()\n          })\n        } else if (region.name === sliceName && !region.isActive) {\n          this.activeSliceName = sliceName\n          region.isActive = true\n          region.display()\n          region.points.forEach(point => {\n            point.display()\n          })\n        }\n        activeCounter++\n      })\n      if (activeCounter === 0) {\n        this.regions.forEach(region => {\n          region.display()\n          region.points.forEach(point => {\n            point.display()\n          })\n        })\n      }\n    }\n  },\n  async created () {\n    await this.getRegionsJson()\n  },\n  async mounted () {\n    await ymaps.ready(this.yandexMapsInitialization)\n  },\n  beforeDestroy() {\n    if (this.chart) {\n      this.chart.dispose();\n    }\n  }\n}\n</script>\n<style scoped>\n.moscow-map {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  width: 100%;\n}\n.moscow-map__chart {\n  width: 100%;\n  height: 40%;\n  font-size: 12px;\n}\n.moscow-map__map {\n  width: 100%;\n  height: 60%;\n}\n</style>\n"]}]}