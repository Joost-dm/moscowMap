{"remainingRequest":"/home/joost/workflow/MoscowMap/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/joost/workflow/MoscowMap/src/components/MapMoscow.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/joost/workflow/MoscowMap/src/components/MapMoscow.vue","mtime":1599861553716},{"path":"/home/joost/workflow/MoscowMap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/joost/workflow/MoscowMap/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/joost/workflow/MoscowMap/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/joost/workflow/MoscowMap/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KCgppbXBvcnQgKiBhcyB5bWFwcyBmcm9tICd5bWFwcycKCnltYXBzLnJlYWR5KGluaXQpCgpmdW5jdGlvbiBpbml0ICgpIHsKICBjb25zdCBteU1hcCA9IG5ldyB5bWFwcy5NYXAoJ21hcCcsIHsKICAgICAgY2VudGVyOiBbMzAuMjY0OTgxOTU1NDU5NjE4LCA1OS45NTY3OTYyNjEwMDk3XSwKICAgICAgem9vbTogOSwKICAgICAgY29udHJvbHM6IFsnZ2VvbG9jYXRpb25Db250cm9sJywgJ3NlYXJjaENvbnRyb2wnXQogICAgfSksCiAgICBkZWxpdmVyeVBvaW50ID0gbmV3IHltYXBzLkdlb09iamVjdCh7CiAgICAgIGdlb21ldHJ5OiB7IHR5cGU6ICdQb2ludCcgfSwKICAgICAgcHJvcGVydGllczogeyBpY29uQ2FwdGlvbjogJ9CQ0LTRgNC10YEnIH0KICAgIH0sIHsKICAgICAgcHJlc2V0OiAnaXNsYW5kcyNibGFja0RvdEljb25XaXRoQ2FwdGlvbicsCiAgICAgIGRyYWdnYWJsZTogdHJ1ZSwKICAgICAgaWNvbkNhcHRpb25NYXhXaWR0aDogJzIxNScKICAgIH0pLAogICAgc2VhcmNoQ29udHJvbCA9IG15TWFwLmNvbnRyb2xzLmdldCgnc2VhcmNoQ29udHJvbCcpCiAgc2VhcmNoQ29udHJvbC5vcHRpb25zLnNldCh7IG5vUGxhY2VtYXJrOiB0cnVlLCBwbGFjZWhvbGRlckNvbnRlbnQ6ICfQktCy0LXQtNC40YLQtSDQsNC00YDQtdGBINC00L7RgdGC0LDQstC60LgnIH0pCiAgbXlNYXAuZ2VvT2JqZWN0cy5hZGQoZGVsaXZlcnlQb2ludCkKCiAgZnVuY3Rpb24gb25ab25lc0xvYWQgKGpzb24pIHsKICAgIC8vINCU0L7QsdCw0LLQu9GP0LXQvCDQt9C+0L3RiyDQvdCwINC60LDRgNGC0YMuCiAgICBjb25zdCBkZWxpdmVyeVpvbmVzID0geW1hcHMuZ2VvUXVlcnkoanNvbikuYWRkVG9NYXAobXlNYXApCiAgICAvLyDQl9Cw0LTQsNGR0Lwg0YbQstC10YIg0Lgg0LrQvtC90YLQtdC90YIg0LHQsNC70YPQvdC+0LIg0L/QvtC70LjQs9C+0L3QvtCyLgogICAgZGVsaXZlcnlab25lcy5lYWNoKGZ1bmN0aW9uIChvYmopIHsKICAgICAgb2JqLm9wdGlvbnMuc2V0KHsKICAgICAgICBmaWxsQ29sb3I6IG9iai5wcm9wZXJ0aWVzLmdldCgnZmlsbCcpLAogICAgICAgIGZpbGxPcGFjaXR5OiBvYmoucHJvcGVydGllcy5nZXQoJ2ZpbGwtb3BhY2l0eScpLAogICAgICAgIHN0cm9rZUNvbG9yOiBvYmoucHJvcGVydGllcy5nZXQoJ3N0cm9rZScpLAogICAgICAgIHN0cm9rZVdpZHRoOiBvYmoucHJvcGVydGllcy5nZXQoJ3N0cm9rZS13aWR0aCcpLAogICAgICAgIHN0cm9rZU9wYWNpdHk6IG9iai5wcm9wZXJ0aWVzLmdldCgnc3Ryb2tlLW9wYWNpdHknKQogICAgICB9KQogICAgICBvYmoucHJvcGVydGllcy5zZXQoJ2JhbGxvb25Db250ZW50Jywgb2JqLnByb3BlcnRpZXMuZ2V0KCdkZXNjcmlwdGlvbicpKQogICAgfSkKCiAgICAvLyDQn9GA0L7QstC10YDQuNC8INC/0L7Qv9Cw0LTQsNC90LjQtSDRgNC10LfRg9C70YzRgtCw0YLQsCDQv9C+0LjRgdC60LAg0LIg0L7QtNC90YMg0LjQtyDQt9C+0L0g0LTQvtGB0YLQsNCy0LrQuC4KICAgIHNlYXJjaENvbnRyb2wuZXZlbnRzLmFkZCgncmVzdWx0c2hvdycsIGZ1bmN0aW9uIChlKSB7CiAgICAgIGhpZ2hsaWdodFJlc3VsdChzZWFyY2hDb250cm9sLmdldFJlc3VsdHNBcnJheSgpW2UuZ2V0KCdpbmRleCcpXSkKICAgIH0pCgogICAgLy8g0J/RgNC+0LLQtdGA0LjQvCDQv9C+0L/QsNC00LDQvdC40LUg0LzQtdGC0LrQuCDQs9C10L7Qu9C+0LrQsNGG0LjQuCDQsiDQvtC00L3RgyDQuNC3INC30L7QvSDQtNC+0YHRgtCw0LLQutC4LgogICAgbXlNYXAuY29udHJvbHMuZ2V0KCdnZW9sb2NhdGlvbkNvbnRyb2wnKS5ldmVudHMuYWRkKCdsb2NhdGlvbmNoYW5nZScsIGZ1bmN0aW9uIChlKSB7CiAgICAgIGhpZ2hsaWdodFJlc3VsdChlLmdldCgnZ2VvT2JqZWN0cycpLmdldCgwKSkKICAgIH0pCgogICAgLy8g0J/RgNC4INC/0LXRgNC10LzQtdGJ0LXQvdC40Lgg0LzQtdGC0LrQuCDRgdCx0YDQsNGB0YvQstCw0LXQvCDQv9C+0LTQv9C40YHRjCwg0YHQvtC00LXRgNC20LjQvNC+0LUg0LHQsNC70YPQvdCwINC4INC/0LXRgNC10LrRgNCw0YjQuNCy0LDQtdC8INC80LXRgtC60YMuCiAgICBkZWxpdmVyeVBvaW50LmV2ZW50cy5hZGQoJ2RyYWdzdGFydCcsIGZ1bmN0aW9uICgpIHsKICAgICAgZGVsaXZlcnlQb2ludC5wcm9wZXJ0aWVzLnNldCh7IGljb25DYXB0aW9uOiAnJywgYmFsbG9vbkNvbnRlbnQ6ICcnIH0pCiAgICAgIGRlbGl2ZXJ5UG9pbnQub3B0aW9ucy5zZXQoJ2ljb25Db2xvcicsICdibGFjaycpCiAgICB9KQoKICAgIC8vINCf0L4g0L7QutC+0L3Rh9Cw0L3QuNC4INC/0LXRgNC10LzQtdGJ0LXQvdC40Y8g0LzQtdGC0LrQuCDQstGL0LfRi9Cy0LDQtdC8INGE0YPQvdC60YbQuNGOINCy0YvQtNC10LvQtdC90LjRjyDQt9C+0L3RiyDQtNC+0YHRgtCw0LLQutC4LgogICAgZGVsaXZlcnlQb2ludC5ldmVudHMuYWRkKCdkcmFnZW5kJywgZnVuY3Rpb24gKCkgewogICAgICBoaWdobGlnaHRSZXN1bHQoZGVsaXZlcnlQb2ludCkKICAgIH0pCgogICAgZnVuY3Rpb24gaGlnaGxpZ2h0UmVzdWx0IChvYmopIHsKICAgICAgLy8g0KHQvtGF0YDQsNC90Y/QtdC8INC60L7QvtGA0LTQuNC90LDRgtGLINC/0LXRgNC10LTQsNC90L3QvtCz0L4g0L7QsdGK0LXQutGC0LAuCiAgICAgIGNvbnN0IGNvb3JkcyA9IG9iai5nZW9tZXRyeS5nZXRDb29yZGluYXRlcygpLAogICAgICAgIC8vINCd0LDRhdC+0LTQuNC8INC/0L7Qu9C40LPQvtC9LCDQsiDQutC+0YLQvtGA0YvQuSDQstGF0L7QtNGP0YIg0L/QtdGA0LXQtNCw0L3QvdGL0LUg0LrQvtC+0YDQtNC40L3QsNGC0YsuCiAgICAgICAgcG9seWdvbiA9IGRlbGl2ZXJ5Wm9uZXMuc2VhcmNoQ29udGFpbmluZyhjb29yZHMpLmdldCgwKQoKICAgICAgaWYgKHBvbHlnb24pIHsKICAgICAgICAvLyDQo9C80LXQvdGM0YjQsNC10Lwg0L/RgNC+0LfRgNCw0YfQvdC+0YHRgtGMINCy0YHQtdGFINC/0L7Qu9C40LPQvtC90L7Qsiwg0LrRgNC+0LzQtSDRgtC+0LPQviwg0LIg0LrQvtGC0L7RgNGL0Lkg0LLRhdC+0LTRj9GCINC/0LXRgNC10LTQsNC90L3Ri9C1INC60L7QvtGA0LTQuNC90LDRgtGLLgogICAgICAgIGRlbGl2ZXJ5Wm9uZXMuc2V0T3B0aW9ucygnZmlsbE9wYWNpdHknLCAwLjQpCiAgICAgICAgcG9seWdvbi5vcHRpb25zLnNldCgnZmlsbE9wYWNpdHknLCAwLjgpCiAgICAgICAgLy8g0J/QtdGA0LXQvNC10YnQsNC10Lwg0LzQtdGC0LrRgyDRgSDQv9C+0LTQv9C40YHRjNGOINCyINC/0LXRgNC10LTQsNC90L3Ri9C1INC60L7QvtGA0LTQuNC90LDRgtGLINC4INC/0LXRgNC10LrRgNCw0YjQuNCy0LDQtdC8INC10ZEg0LIg0YbQstC10YIg0L/QvtC70LjQs9C+0L3QsC4KICAgICAgICBkZWxpdmVyeVBvaW50Lmdlb21ldHJ5LnNldENvb3JkaW5hdGVzKGNvb3JkcykKICAgICAgICBkZWxpdmVyeVBvaW50Lm9wdGlvbnMuc2V0KCdpY29uQ29sb3InLCBwb2x5Z29uLnByb3BlcnRpZXMuZ2V0KCdmaWxsJykpCiAgICAgICAgLy8g0JfQsNC00LDQtdC8INC/0L7QtNC/0LjRgdGMINC00LvRjyDQvNC10YLQutC4LgogICAgICAgIGlmICh0eXBlb2YgKG9iai5nZXRUaG9yb3VnaGZhcmUpID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICBzZXREYXRhKG9iaikKICAgICAgICB9IGVsc2UgewogICAgICAgICAgLy8g0JXRgdC70Lgg0LLRiyDQvdC1INGF0L7RgtC40YLQtSwg0YfRgtC+0LHRiyDQv9GA0Lgg0LrQsNC20LTQvtC8INC/0LXRgNC10LzQtdGJ0LXQvdC40Lgg0LzQtdGC0LrQuCDQvtGC0L/RgNCw0LLQu9GP0LvRgdGPINC30LDQv9GA0L7RgSDQuiDQs9C10L7QutC+0LTQtdGA0YMsCiAgICAgICAgICAvLyDQt9Cw0LrQvtC80LzQtdC90YLQuNGA0YPQudGC0LUg0LrQvtC0INC90LjQttC1LgogICAgICAgICAgeW1hcHMuZ2VvY29kZShjb29yZHMsIHsgcmVzdWx0czogMSB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAgICAgY29uc3Qgb2JqID0gcmVzLmdlb09iamVjdHMuZ2V0KDApCiAgICAgICAgICAgIHNldERhdGEob2JqKQogICAgICAgICAgfSkKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8g0JXRgdC70Lgg0L/QtdGA0LXQtNCw0L3QvdGL0LUg0LrQvtC+0YDQtNC40L3QsNGC0Ysg0L3QtSDQv9C+0L/QsNC00LDRjtGCINCyINC/0L7Qu9C40LPQvtC9LCDRgtC+INC30LDQtNCw0ZHQvCDRgdGC0LDQvdC00LDRgNGC0L3Rg9GOINC/0YDQvtC30YDQsNGH0L3QvtGB0YLRjCDQv9C+0LvQuNCz0L7QvdC+0LIuCiAgICAgICAgZGVsaXZlcnlab25lcy5zZXRPcHRpb25zKCdmaWxsT3BhY2l0eScsIDAuNCkKICAgICAgICAvLyDQn9C10YDQtdC80LXRidCw0LXQvCDQvNC10YLQutGDINC/0L4g0L/QtdGA0LXQtNCw0L3QvdGL0Lwg0LrQvtC+0YDQtNC40L3QsNGC0LDQvC4KICAgICAgICBkZWxpdmVyeVBvaW50Lmdlb21ldHJ5LnNldENvb3JkaW5hdGVzKGNvb3JkcykKICAgICAgICAvLyDQl9Cw0LTQsNGR0Lwg0LrQvtC90YLQtdC90YIg0LHQsNC70YPQvdCwINC4INC80LXRgtC60LguCiAgICAgICAgZGVsaXZlcnlQb2ludC5wcm9wZXJ0aWVzLnNldCh7CiAgICAgICAgICBpY29uQ2FwdGlvbjogJ9CU0L7RgdGC0LDQstC60LAg0YLRgNCw0L3RgdC/0L7RgNGC0L3QvtC5INC60L7QvNC/0LDQvdC40LXQuScsCiAgICAgICAgICBiYWxsb29uQ29udGVudDogJ0PQstGP0LbQuNGC0LXRgdGMINGBINC+0L/QtdGA0LDRgtC+0YDQvtC8JywKICAgICAgICAgIGJhbGxvb25Db250ZW50SGVhZGVyOiAnJwogICAgICAgIH0pCiAgICAgICAgLy8g0J/QtdGA0LXQutGA0LDRiNC40LLQsNC10Lwg0LzQtdGC0LrRgyDQsiDRh9GR0YDQvdGL0Lkg0YbQstC10YIuCiAgICAgICAgZGVsaXZlcnlQb2ludC5vcHRpb25zLnNldCgnaWNvbkNvbG9yJywgJ2JsYWNrJykKICAgICAgfQoKICAgICAgZnVuY3Rpb24gc2V0RGF0YSAob2JqKXsKICAgICAgICBsZXQgYWRkcmVzcyA9IFtvYmouZ2V0VGhvcm91Z2hmYXJlKCksIG9iai5nZXRQcmVtaXNlTnVtYmVyKCksIG9iai5nZXRQcmVtaXNlKCldLmpvaW4oJyAnKQogICAgICAgIGlmIChhZGRyZXNzLnRyaW0oKSA9PT0gJycpIHsKICAgICAgICAgIGFkZHJlc3MgPSBvYmouZ2V0QWRkcmVzc0xpbmUoKQogICAgICAgIH0KICAgICAgICBsZXQgcHJpY2UgPSBwb2x5Z29uLnByb3BlcnRpZXMuZ2V0KCdkZXNjcmlwdGlvbicpCiAgICAgICAgcHJpY2UgPSBwcmljZS5tYXRjaCgvPHN0cm9uZz4oLispPFwvc3Ryb25nPi8pWzFdCiAgICAgICAgZGVsaXZlcnlQb2ludC5wcm9wZXJ0aWVzLnNldCh7CiAgICAgICAgICBpY29uQ2FwdGlvbjogYWRkcmVzcywKICAgICAgICAgIGJhbGxvb25Db250ZW50OiBhZGRyZXNzLAogICAgICAgICAgYmFsbG9vbkNvbnRlbnRIZWFkZXI6IHByaWNlCiAgICAgICAgfSkKICAgICAgfQogICAgfQogIH0KICAkLmFqYXggKHsKICAgIHVybDogJ2h0dHA6Ly9naXMtbGFiLmluZm8vZGF0YS9tb3MtYWRtL2FvLmdlb2pzb24nLAogICAgZGF0YVR5cGU6ICdqc29uJywKICAgIHN1Y2Nlc3M6IG9uWm9uZXNMb2FkCiAgfSkKfQpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ01hcE1vc2NvdycKfQo="},{"version":3,"sources":["MapMoscow.vue"],"names":[],"mappings":";;;;;;;;AAQA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"MapMoscow.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <v-btn>WORKING</v-btn>\n  </div>\n</template>\n\n<script>\n\nimport * as ymaps from 'ymaps'\n\nymaps.ready(init)\n\nfunction init () {\n  const myMap = new ymaps.Map('map', {\n      center: [30.264981955459618, 59.9567962610097],\n      zoom: 9,\n      controls: ['geolocationControl', 'searchControl']\n    }),\n    deliveryPoint = new ymaps.GeoObject({\n      geometry: { type: 'Point' },\n      properties: { iconCaption: 'Адрес' }\n    }, {\n      preset: 'islands#blackDotIconWithCaption',\n      draggable: true,\n      iconCaptionMaxWidth: '215'\n    }),\n    searchControl = myMap.controls.get('searchControl')\n  searchControl.options.set({ noPlacemark: true, placeholderContent: 'Введите адрес доставки' })\n  myMap.geoObjects.add(deliveryPoint)\n\n  function onZonesLoad (json) {\n    // Добавляем зоны на карту.\n    const deliveryZones = ymaps.geoQuery(json).addToMap(myMap)\n    // Задаём цвет и контент балунов полигонов.\n    deliveryZones.each(function (obj) {\n      obj.options.set({\n        fillColor: obj.properties.get('fill'),\n        fillOpacity: obj.properties.get('fill-opacity'),\n        strokeColor: obj.properties.get('stroke'),\n        strokeWidth: obj.properties.get('stroke-width'),\n        strokeOpacity: obj.properties.get('stroke-opacity')\n      })\n      obj.properties.set('balloonContent', obj.properties.get('description'))\n    })\n\n    // Проверим попадание результата поиска в одну из зон доставки.\n    searchControl.events.add('resultshow', function (e) {\n      highlightResult(searchControl.getResultsArray()[e.get('index')])\n    })\n\n    // Проверим попадание метки геолокации в одну из зон доставки.\n    myMap.controls.get('geolocationControl').events.add('locationchange', function (e) {\n      highlightResult(e.get('geoObjects').get(0))\n    })\n\n    // При перемещении метки сбрасываем подпись, содержимое балуна и перекрашиваем метку.\n    deliveryPoint.events.add('dragstart', function () {\n      deliveryPoint.properties.set({ iconCaption: '', balloonContent: '' })\n      deliveryPoint.options.set('iconColor', 'black')\n    })\n\n    // По окончании перемещения метки вызываем функцию выделения зоны доставки.\n    deliveryPoint.events.add('dragend', function () {\n      highlightResult(deliveryPoint)\n    })\n\n    function highlightResult (obj) {\n      // Сохраняем координаты переданного объекта.\n      const coords = obj.geometry.getCoordinates(),\n        // Находим полигон, в который входят переданные координаты.\n        polygon = deliveryZones.searchContaining(coords).get(0)\n\n      if (polygon) {\n        // Уменьшаем прозрачность всех полигонов, кроме того, в который входят переданные координаты.\n        deliveryZones.setOptions('fillOpacity', 0.4)\n        polygon.options.set('fillOpacity', 0.8)\n        // Перемещаем метку с подписью в переданные координаты и перекрашиваем её в цвет полигона.\n        deliveryPoint.geometry.setCoordinates(coords)\n        deliveryPoint.options.set('iconColor', polygon.properties.get('fill'))\n        // Задаем подпись для метки.\n        if (typeof (obj.getThoroughfare) === 'function') {\n          setData(obj)\n        } else {\n          // Если вы не хотите, чтобы при каждом перемещении метки отправлялся запрос к геокодеру,\n          // закомментируйте код ниже.\n          ymaps.geocode(coords, { results: 1 }).then(function (res) {\n            const obj = res.geoObjects.get(0)\n            setData(obj)\n          })\n        }\n      } else {\n        // Если переданные координаты не попадают в полигон, то задаём стандартную прозрачность полигонов.\n        deliveryZones.setOptions('fillOpacity', 0.4)\n        // Перемещаем метку по переданным координатам.\n        deliveryPoint.geometry.setCoordinates(coords)\n        // Задаём контент балуна и метки.\n        deliveryPoint.properties.set({\n          iconCaption: 'Доставка транспортной компанией',\n          balloonContent: 'Cвяжитесь с оператором',\n          balloonContentHeader: ''\n        })\n        // Перекрашиваем метку в чёрный цвет.\n        deliveryPoint.options.set('iconColor', 'black')\n      }\n\n      function setData (obj){\n        let address = [obj.getThoroughfare(), obj.getPremiseNumber(), obj.getPremise()].join(' ')\n        if (address.trim() === '') {\n          address = obj.getAddressLine()\n        }\n        let price = polygon.properties.get('description')\n        price = price.match(/<strong>(.+)<\\/strong>/)[1]\n        deliveryPoint.properties.set({\n          iconCaption: address,\n          balloonContent: address,\n          balloonContentHeader: price\n        })\n      }\n    }\n  }\n  $.ajax ({\n    url: 'http://gis-lab.info/data/mos-adm/ao.geojson',\n    dataType: 'json',\n    success: onZonesLoad\n  })\n}\nexport default {\n  name: 'MapMoscow'\n}\n</script>\n"]}]}